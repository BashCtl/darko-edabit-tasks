package hard;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

/*
Look-And-Say Sequence

The look-and-say sequence is generated by describing each group
of identical digits in the previous term. If we start at "1", the first five terms in the sequence are:

"1" = "one 1" = "11"
"11" = "two 1's" = "21"
"21" = "one 2, one 1" = "1211"
"1211" = "one 1, one 2, two 1's" = "111221"
"111221" = "three 1's, two 2's, one 1" = "312211"
Given a term (as a string), return the next term in the sequence.

Examples
lookAndSay("1211") ➞ "111221"

lookAndSay("111221") ➞ "312211"

lookAndSay("31131211131221") ➞ "13211311123113112211"

Notes
Terms will only include the digits 1, 2, and 3.
 */
public class LookAndSaySequence {


    public static String lookAndSay(String term) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < term.length(); ) {
            int counter = 0;
            char c = term.charAt(i);
            while (i != term.length() && c == term.charAt(i)) {
                counter++;
                i++;
            }
            result.append(counter).append(c);
        }
        return result.toString();
    }

    @Test
    public void test1() {
        assertEquals("1113213211", lookAndSay("13112221"));
    }

    @Test
    public void test2() {
        assertEquals("31131211131221", lookAndSay("1113213211"));
    }

    @Test
    public void test3() {
        assertEquals("13211311123113112211", lookAndSay("31131211131221"));
    }

    @Test
    public void test4() {
        assertEquals("11131221133112132113212221", lookAndSay("13211311123113112211"));
    }

    @Test
    public void test5() {
        assertEquals("3113112221232112111312211312113211", lookAndSay("11131221133112132113212221"));
    }

    @Test
    public void test6() {
        assertEquals("1321132132111213122112311311222113111221131221", lookAndSay("3113112221232112111312211312113211"));
    }

    @Test
    public void test7() {
        assertEquals("11131221131211131231121113112221121321132132211331222113112211", lookAndSay("1321132132111213122112311311222113111221131221"));
    }

    @Test
    public void test8() {
        assertEquals("311311222113111231131112132112311321322112111312211312111322212311322113212221", lookAndSay("11131221131211131231121113112221121321132132211331222113112211"));
    }

    @Test
    public void test9() {
        assertEquals("132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211", lookAndSay("311311222113111231131112132112311321322112111312211312111322212311322113212221"));
    }

    @Test
    public void test10() {
        assertEquals("11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221", lookAndSay("132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"));
    }
}
